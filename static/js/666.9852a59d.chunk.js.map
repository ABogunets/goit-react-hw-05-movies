{"version":3,"file":"static/js/666.9852a59d.chunk.js","mappings":"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","sources":["components/Error.styled.js","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MoviesDetails.styled.js","pages/MoviesDetails.jsx","services/pics-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Error = styled.h4`\n  margin-top: 10px;\n  margin-bottom: 10px;\n  color: red;\n  font-size: 14px;\n  font-style: italic;\n`;\n","import styled from 'styled-components';\n\nexport const LoaderWrapper = styled.div`\n  padding: 10px 0;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { ThreeDots } from 'react-loader-spinner';\nimport { LoaderWrapper } from 'components/Loader/Loader.styled';\n\nexport const Loader = () => {\n  return (\n    <LoaderWrapper>\n      <ThreeDots\n        height=\"50\"\n        width=\"50\"\n        radius=\"9\"\n        color=\"#3f51b5\"\n        ariaLabel=\"three-dots-loading\"\n        wrapperStyle={{}}\n        wrapperClassName=\"\"\n        visible={true}\n      />\n      ;\n    </LoaderWrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const MovieCardWrapper = styled.div`\n  display: flex;\n  margin-top: 10px;\n  margin-bottom: 20px;\n`;\n\nexport const Image = styled.img`\n  width: 200px;\n  margin-right: 20px;\n`;\nexport const Description = styled.div`\n  margin-bottom: 20px;\n`;\n\nexport const Title = styled.h2`\n  margin-bottom: 10px;\n`;\nexport const Overview = styled.h3`\n  margin-top: 10px;\n`;\n\nexport const Genres = styled.h3`\n  margin-top: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport {\n  MovieCardWrapper,\n  Image,\n  Description,\n  Title,\n  Overview,\n  Genres,\n} from 'components/MovieCard/MovieCard.styled';\nimport noImage from 'images/noImage.png';\n\nexport const MovieCard = ({ data }) => {\n  const { poster_path, title, overview, vote_average, genres, release_date } =\n    data;\n  return (\n    <MovieCardWrapper>\n      <Image\n        src={\n          poster_path\n            ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n            : noImage\n        }\n        alt={title}\n      />\n      <Description>\n        <Title>{`${title} (${release_date.slice(0, 4)})`}</Title>\n        <p>User Score: {Math.round(vote_average * 10)}%</p>\n        <Overview>Overview</Overview>\n        <p>{overview}</p>\n        <Genres>Genres</Genres>\n        <p>\n          {genres.map(genre => (\n            <span key={genre.id}>{genre.name} </span>\n          ))}\n        </p>\n      </Description>\n    </MovieCardWrapper>\n  );\n};\n\nMovieCard.propTypes = {\n  data: PropTypes.object,\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.div`\n  padding-left: 20px;\n`;\n\nexport const AddInformation = styled.div`\n  padding: 20px 0px;\n  border-top: 1px solid grey;\n  border-bottom: 1px solid grey;\n`;\n\nexport const LinkBack = styled(NavLink)`\n  padding: 3px 8px;\n  border-radius: 4px;\n\n  background-color: LightGray;\n  text-decoration: none;\n\n  &:hover {\n    color: orangered;\n  }\n`;\n\nexport const Link = styled(NavLink)``;\n","import { Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovies } from 'services/pics-api';\nimport { Loader } from 'components/Loader/Loader';\nimport { MovieCard } from 'components/MovieCard/MovieCard';\nimport { List, AddInformation, LinkBack, Link } from './MoviesDetails.styled';\nimport { Error } from 'components/Error.styled';\nimport { useLocation } from 'react-router-dom';\n\nconst MoviesDetails = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [data, setData] = useState();\n  const { id } = useParams();\n\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? `/movies`;\n\n  const CATEGORY = `movie/${id}`;\n  const searchQuery = '';\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const getMovies = async () => {\n      try {\n        const data = await fetchMovies(CATEGORY, searchQuery);\n        setData(data);\n      } catch (err) {\n        console.log(err.message);\n        setError('Sorry, the resource you requested could not be found.');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getMovies();\n  }, [CATEGORY]);\n\n  return (\n    <main>\n      {isLoading && <Loader />}\n      <LinkBack to={backLinkHref}>Go back</LinkBack>\n      {error && <Error>{error}</Error>}\n      {data && <MovieCard data={data} />}\n      <AddInformation>\n        <h4>Additional information</h4>\n        <List>\n          <li>\n            <Link to=\"cast\" state={{ from: backLinkHref }}>\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\" state={{ from: backLinkHref }}>\n              Review\n            </Link>\n          </li>\n        </List>\n      </AddInformation>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MoviesDetails;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'a5df1998c5a11e97d4f18de655b25c8d';\n\nexport const fetchMovies = async (category, searchQuery) => {\n  const url = `${BASE_URL}${category}?api_key=${API_KEY}&query=${searchQuery}&language=en&page=1`;\n  const response = await axios.get(url);\n  return response.data;\n};\n"],"names":["Error","styled","LoaderWrapper","Loader","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","MovieCardWrapper","Image","Description","Title","Overview","Genres","MovieCard","data","poster_path","title","overview","vote_average","genres","release_date","src","noImage","alt","slice","Math","round","map","genre","name","id","List","AddInformation","LinkBack","NavLink","Link","useState","isLoading","setIsLoading","error","setError","setData","useParams","backLinkHref","useLocation","state","from","CATEGORY","useEffect","getMovies","fetchMovies","console","log","message","to","Suspense","fallback","category","searchQuery","url","axios","response"],"sourceRoot":""}